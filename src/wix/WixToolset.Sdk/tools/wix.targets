<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the Microsoft Reciprocal License. See LICENSE.TXT file in the project root for full license information. -->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build">
  <PropertyGroup>
    <WixTargetsImported>true</WixTargetsImported>
  </PropertyGroup>

  <Import Project="wix.props" Condition=" '$(WixPropsImported)' != 'true' " />

  <ImportGroup>
    <Import Project="$(MSBuildUserExtensionsPath)\WixToolset\$(WixToolsetMajorMinorVersion)\Imports\WixToolset.targets\ImportBefore\*" Condition="'$(ImportUserLocationsByWildcardBeforeWixToolsetTargets)' != 'false' and Exists('$(MSBuildUserExtensionsPath)\WixToolset\$(WixToolsetMajorMinorVersion)\Imports\WixToolset.targets\ImportBefore')" />
    <Import Project="$(MSBuildExtensionsPath)\WixToolset\$(WixToolsetMajorMinorVersion)\Imports\WixToolset.targets\ImportBefore\*" Condition="'$(ImportByWildcardBeforeWixToolsetTargets)' != 'false' and Exists('$(MSBuildExtensionsPath)\WixToolset\$(WixToolsetMajorMinorVersion)\Imports\WixToolset.targets\ImportBefore')" />
  </ImportGroup>

  <!--
  ***********************************************************************************************
  ***********************************************************************************************
                                                                Extension Points
  ***********************************************************************************************
  ***********************************************************************************************
  -->

  <!-- Allow a user-customized targets files to be used as part of the build. -->
  <Import Project="$(CustomBeforeWixTargets)" Condition=" '$(CustomBeforeWixTargets)' != '' and Exists('$(CustomBeforeWixTargets)')" />

  <!-- These properties can be overridden to support non-default installations. -->
  <PropertyGroup>
    <WixBinDir Condition=" '$(WixBinDir)' == '' and '$(MSBuildRuntimeType)' == 'Core' ">$(MSBuildThisFileDirectory)net6.0\</WixBinDir>
    <WixBinDir Condition=" '$(WixBinDir)' == '' ">$(MSBuildThisFileDirectory)net472\</WixBinDir>
    <WixTasksPath Condition=" '$(WixTasksPath)' == '' ">$(WixBinDir)WixToolset.BuildTasks.dll</WixTasksPath>
  </PropertyGroup>

  <ItemGroup Condition=" '$(EnableDefaultItems)' == 'true' ">
    <Compile Include="**/*.wxs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" Condition=" '$(EnableDefaultCompileItems)' == 'true' " />
    <EmbeddedResource Include="**/*.wxl" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" Condition=" '$(EnableDefaultEmbeddedResourceItems)' == 'true' " />
  </ItemGroup>

  <ItemGroup>
    <AvailableItemName Include="BindPath;BindVariable;WixLibrary;WixExtension" />
  </ItemGroup>

  <UsingTask TaskName="CreateItemAvoidingInference" AssemblyFile="$(WixTasksPath)" />
  <UsingTask TaskName="UpdateProjectReferenceMetadata" AssemblyFile="$(WixTasksPath)" />
  <UsingTask TaskName="CreateProjectReferenceDefineConstantsAndBindPaths" AssemblyFile="$(WixTasksPath)" />
  <UsingTask TaskName="WixAssignCulture" AssemblyFile="$(WixTasksPath)" />
  <UsingTask TaskName="ReadTracking" AssemblyFile="$(WixTasksPath)" />
  <UsingTask TaskName="ResolveWixReferences" AssemblyFile="$(WixTasksPath)" />
  <UsingTask TaskName="WixBuild" AssemblyFile="$(WixTasksPath)" />
  <UsingTask TaskName="WindowsInstallerValidation" AssemblyFile="$(WixTasksPath)" />

  <!--
  ***********************************************************************************************
  ***********************************************************************************************
                                                                Declarations for Microsoft.Common.targets
  ***********************************************************************************************
  ***********************************************************************************************
  -->

  <PropertyGroup>
    <DefaultProjectTypeGuid Condition=" '$(DefaultProjectTypeGuid)' == '' ">{B7DD6F7E-DEF8-4E67-B5B7-07EF123DB6F0}</DefaultProjectTypeGuid>
    <DefaultLanguageSourceExtension>.wxs</DefaultLanguageSourceExtension>
    <Language>wix</Language>
    <TargetRuntime>wix</TargetRuntime>

    <!-- Ensure BaseOutputPath for Microsoft.Common.targets -->
    <BaseOutputPath Condition="'$(BaseOutputPath)' == ''">bin\</BaseOutputPath>
    <BaseOutputPath Condition="!HasTrailingSlash('$(BaseOutputPath)')">$(BaseOutputPath)\</BaseOutputPath>

    <!-- Use OutputName to set the AssemblyName for Microsoft.Common.targets -->
    <OutputName Condition=" '$(OutputName)'=='' ">$(MSBuildProjectName)</OutputName>
    <AssemblyName>$(OutputName)</AssemblyName>

    <!-- Default OutputType to a known WiX Toolset type.  -->
    <OutputType Condition=" '$(OutputType)' == '' ">Package</OutputType>

    <DebugType Condition=" '$(SuppressPdbOutput)' == 'true' ">none</DebugType>
    <DebugType Condition=" '$(DebugType)' == '' ">full</DebugType>
  </PropertyGroup>

  <PropertyGroup>
    <_VCLibCurrentVersion>14.0</_VCLibCurrentVersion>
  </PropertyGroup>

  <!--
  IDE Macros available from both integrated builds and from command line builds.
  The following properties are 'macros' that are available via IDE for pre and post build steps.
  All of them should be added to WixBuildMacroCollection to ensure that they are shown in the UI.
  -->
  <PropertyGroup Condition=" '$(TargetExt)' == '' ">
    <TargetExt Condition=" '$(OutputType)' == 'Package' ">.msi</TargetExt>
    <TargetExt Condition=" '$(OutputType)' == 'Module' ">.msm</TargetExt>
    <TargetExt Condition=" '$(OutputType)' == 'Patch' ">.msp</TargetExt>
    <TargetExt Condition=" '$(OutputType)' == 'PatchCreation' ">.pcp</TargetExt>
    <TargetExt Condition=" '$(OutputType)' == 'Library' ">.wixlib</TargetExt>
    <TargetExt Condition=" '$(OutputType)' == 'Bundle' ">.exe</TargetExt>
    <TargetExt Condition=" '$(OutputType)' == 'IntermediatePostLink' ">.wixipl</TargetExt>
  </PropertyGroup>

  <Import Project="$(MSBuildToolsPath)\Microsoft.Common.targets" />

  <!--
  This will override some targets that get defined in Microsoft.Common just like Microsoft.NET.DisableStandardFrameworkResolution.targets
  so this needs to be imported after
  -->
  <Target Name="GetReferenceAssemblyPaths" />
  <Target Name="GetFrameworkPaths" />
  <PropertyGroup>
    <_TargetFrameworkDirectories />
    <FrameworkPathOverride />
    <TargetFrameworkDirectory />
    <NoStdLib>true</NoStdLib>
  </PropertyGroup>
  <!-- end Microsoft.NET.DisableStandardFrameworkResolution.targets -->

  <PropertyGroup>
    <!-- We don't target any frameworks, so clear what the Microsoft.Common.targets set -->
    <AddAdditionalExplicitAssemblyReferences>false</AddAdditionalExplicitAssemblyReferences>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <!-- Customize project references to not attempt assembly reference resolution. -->
    <ProjectReference>
      <Private>false</Private>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
      <OutputItemType>_WixResolvedProjectReference</OutputItemType>
    </ProjectReference>

    <!-- By default do not copy none items to output. -->
    <None>
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
    </None>
  </ItemDefinitionGroup>

  <PropertyGroup>
    <!--
    Only Package, Module and Bundle output types create .wixpdbs, so reset the flag indicating symbols will be produced outside of those output types.
    -->
    <_DebugSymbolsProduced Condition=" '$(OutputType)' != 'Package' and '$(OutputType)' != 'Module' and '$(OutputType)' != 'Patch' and '$(OutputType)' != 'Bundle' ">false</_DebugSymbolsProduced>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Default pdb output path to the intermediate output directory -->
    <PdbOutputDir Condition=" '$(PdbOutputDir)'=='' ">$(TargetDir)</PdbOutputDir>
    <TargetPdbDir Condition=" '$(PdbOutputDir)'!='' ">$([MSBuild]::NormalizeDirectory($(MSBuildProjectDirectory), $(PdbOutputDir)))</TargetPdbDir>
    <TargetPdbFileName Condition=" '$(TargetPdbFileName)' == '' ">$(TargetName).wixpdb</TargetPdbFileName>
    <TargetPdbPath Condition=" '$(TargetPdbPath)' == '' ">$(TargetPdbDir)$(TargetPdbFileName)</TargetPdbPath>
  </PropertyGroup>

  <PropertyGroup>
    <BindTrackingFilePrefix Condition=" '$(BindTrackingFilePrefix)' == '' ">$(MSBuildProjectFile).BindTracking</BindTrackingFilePrefix>
    <BindTrackingFileExtension Condition=" '$(BindTrackingFileExtension)' == '' ">.txt</BindTrackingFileExtension>
  </PropertyGroup>

  <!--
  ***********************************************************************************************
  ***********************************************************************************************
                                                                Property Declarations
  ***********************************************************************************************
  ***********************************************************************************************
  -->

  <!--
  ***********************************************************************************************
  ***********************************************************************************************
                                                                Default Property Declarations
  ***********************************************************************************************
  ***********************************************************************************************
  -->

  <!-- Default Compiler properties. -->
  <PropertyGroup>
    <InstallerPlatform Condition=" '$(InstallerPlatform)' == '' and ('$(Platform)' == '' or '$(Platform)' == 'Win32' or '$(Platform)' == 'AnyCPU' or '$(Platform)' == 'Any CPU') ">x86</InstallerPlatform>
    <InstallerPlatform Condition=" '$(InstallerPlatform)' == '' ">$(Platform)</InstallerPlatform>
  </PropertyGroup>

  <!-- Convert legacy BindInputPaths and LinkerBindInputPaths (in the project or passed in via the command line) into the new BindPath items -->
  <ItemGroup>
    <BindInputPaths Include="$(BindInputPaths)"  Condition=" '$(BindInputPaths)' != '' " />
    <LinkerBindInputPaths Include="$(LinkerBindInputPaths)"  Condition=" '$(LinkerBindInputPaths)' != '' " />
    <BindPath Include="$(BindPath)"  Condition=" '$(BindPath)' != '' " />
    <BindPath Include="@(BindInputPaths);@(LinkerBindInputPaths)" />
    <BindVariable Include="$(WixVariables)"  Condition=" '$(WixVariables)' != '' " />
  </ItemGroup>

  <!--
    ***********************************************************************************************
    ***********************************************************************************************
                                                                Resolve References Section
    ***********************************************************************************************
    ***********************************************************************************************
    -->

  <!--
    ================================================================================================
                                        ResolveReferences - OVERRIDE DependsOn

    ================================================================================================
    -->
  <PropertyGroup>
    <ResolveReferencesDependsOn>
      BeforeResolveReferences;
      AssignProjectConfiguration;
      _ValidateProjectAssetsFile;
      ResolveProjectReferences;
      FindInvalidProjectReferences;
      ResolveNativeProjectReferences;
      _ConvertResolvedProjectReferencesIntoWixConstructs;
      ResolveWixLibraryReferences;
      ResolveWixExtensionReferences;
      _CreateProjectDefineConstants;
      AfterResolveReferences
    </ResolveReferencesDependsOn>
  </PropertyGroup>

  <!--
    ================================================================================================
                                        _ValidateProjectAssetsFile

    Ensures that the project assets file exists which indicates restore was completed. Restore is
    required if there are any PackageReferences in the project.

    [IN]
    @(PackageReference) - Package references, if any.
    $(ProjectAssetsFile) - Project assets file that should be created during restore.
    ================================================================================================
    -->
  <Target
    Name="_ValidateProjectAssetsFile"
    Condition=" '@(PackageReference)' != '' ">

    <Error Text="The $(ProjectAssetsFile) file does not exist. Restore the project before trying to build again. Restore and build with &quot;MSBuild -Restore&quot; or &quot;dotnet build&quot;."
           Condition="!Exists('$(ProjectAssetsFile)')" />

  </Target>

  <!--
    ================================================================================================
                                        _WixUpdateProjectReferenceMetadata

    Updates project references so they build correctly when referenced by .wixproj.

    [IN]
    @(_MSBuildProjectReferenceExistent) - References to projects that exist.

    [OUT]
    @(_MSBuildProjectReferenceExistent) - Project references updated as necessary.
    ================================================================================================
    -->
  <Target
    Name="_WixUpdateProjectReferenceMetadata"
    AfterTargets="_SplitProjectReferencesByFileExistence"
    Condition=" '@(_MSBuildProjectReferenceExistent)' != '' ">

    <UpdateProjectReferenceMetadata
        ProjectReferences="@(_MSBuildProjectReferenceExistent)"
        IntermediateFolder="$(IntermediateOutputPath)">
      <Output TaskParameter="UpdatedProjectReferences" ItemName="_WixUpdatedProjectReferences" />
    </UpdateProjectReferenceMetadata>

    <ItemGroup>
      <_MSBuildProjectReferenceExistent Remove='@(_WixUpdatedProjectReferences)' />
      <_MSBuildProjectReferenceExistent Include='@(_WixUpdatedProjectReferences)' />
    </ItemGroup>
  </Target>

  <!--
    ================================================================================================
                                        ResolveNativeProjectReferences

    VC project references must build GetNativeTargetPath because neither GetTargetPath nor
    the return of the default build target return the output for a native .vcxproj.

    [IN]
    @(_MSBuildProjectReferenceExistent) - References to projects that exist.

    [OUT]
    @(_WixResolvedProjectReference) - Target paths from .vcxproj outputs added.
    ================================================================================================
    -->
  <Target
    Name="ResolveNativeProjectReferences"
    Condition=" '@(_MSBuildProjectReferenceExistent)' != '' ">

    <MSBuild
      Projects="@(_MSBuildProjectReferenceExistent)"
      Targets="GetNativeTargetPath"
      Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform)"
      Condition=" '@(ProjectReferenceWithConfiguration)' != '' and '%(_MSBuildProjectReferenceExistent.Extension)' == '.vcxproj' "
      BuildInParallel="true">

      <Output TaskParameter="TargetOutputs" ItemName="_WixResolvedProjectReference" />
    </MSBuild>
  </Target>

  <!--
    ================================================================================================
                                        _ConvertResolvedProjectReferencesIntoWixConstructs

    Converts _WixResolvedProjectReference (which are the outputs of the ProjectReferences that
    normally would be passed through ResolveAssemblyReferences then be passed to the C# compiler
    as references) into the appropriate WiX constructs. For example, references to .wixlibs are
    converted into WixLibrary items. In the end, _WixResolvedProjectReference is emptied to
    prevent ResolveAssemblyReferences and other non-sensical targets (from a WiX point of view)
    from doing work.

    [IN]
    @(_WixResolvedProjectReference) - Resolved project references.
    $(VSProjectConfigurations) - map of project names to configurations, provided by VS when building in the IDE.

    [OUT]
    $(ProjectReferenceDefineConstants) - Define constants from project references.
    @(BindPath) - Bind paths from project references.
    @(WixLibrary) - Target paths from .vcxproj outputs added.
    @(_WixReferencedProjectOutputs) - Copy of _WixResolvedProjectReference for use in up-to-date checks.
    @(_WixResolvedProjectReference) - All resolved reference paths emptied.
    ================================================================================================
    -->
  <PropertyGroup>
    <_ConvertResolvedProjectReferencesIntoWixConstructs></_ConvertResolvedProjectReferencesIntoWixConstructs>
  </PropertyGroup>
  <Target
      Name="_ConvertResolvedProjectReferencesIntoWixConstructs"
      DependsOnTargets="$(_ConvertResolvedProjectReferencesIntoWixConstructs)"
      Condition=" '@(_WixResolvedProjectReference)' != '' ">

    <!-- Save all the project reference outputs before we start removing -->
    <ItemGroup>
      <_WixReferencedProjectOutputs Include="@(_WixResolvedProjectReference)" />
    </ItemGroup>

    <ItemGroup>
      <WixLibrary Include="@(_WixResolvedProjectReference)" Condition=" '%(Extension)' == '.wixlib' " />
    </ItemGroup>

    <!-- Convert resolved project references into compiler defines and named and unamed bind paths -->
    <CreateProjectReferenceDefineConstantsAndBindPaths
        ResolvedProjectReferences="@(_WixResolvedProjectReference)"
        ProjectConfigurations="$(VSProjectConfigurations)">
      <Output TaskParameter="BindPaths" ItemName="BindPath" />
      <Output TaskParameter="DefineConstants" PropertyName="ProjectReferenceDefineConstants" />
    </CreateProjectReferenceDefineConstantsAndBindPaths>

    <!--
      Empty the resolved project references to prevent ResolveAssemblyReferences and other C# specific
      behavior from kicking in
    -->
    <ItemGroup>
      <_WixResolvedProjectReference Remove="@(_WixResolvedProjectReference)" />
    </ItemGroup>
  </Target>

  <!--
    ================================================================================================
                                        ResolveWixLibraryReferences

    Resolve the library references to full paths by searching using $(WixLibrarySearchPaths) and
    including the outputs from any ProjectReferences that output .wixlib.

    By default the WixLibrarySearchPaths property is set to find libraries in the following order:

        (1) $(ReferencePaths) - the reference paths property.
        (2) The hintpath from the referenced item itself, indicated by {HintPathFromItem}.
        (3) Treat the reference's Include as if it were a real file name.

    [IN]
    @(WixLibrary) - the list of .wixlib files.
    $(WixLibrarySearchPaths) - optional search paths used to find .wixlibs.

    [OUT]
    @(_ResolvedWixLibraryPaths) - Item group with full paths to libraries that were found.
    @(_UnresolvedWixLibraryPaths) - Item group with full paths to libraries that were not found.
    ================================================================================================
    -->
  <PropertyGroup>
    <ResolveWixLibraryReferencesDependsOn></ResolveWixLibraryReferencesDependsOn>
  </PropertyGroup>
  <Target
    Name="ResolveWixLibraryReferences"
    DependsOnTargets="$(ResolveWixLibraryReferencesDependsOn)"
    Condition=" '@(WixLibrary)' != ''">

    <PropertyGroup>
      <WixLibrarySearchPaths Condition=" '$(WixLibrarySearchPaths)' == '' ">$(ReferencePaths);{HintPathFromItem};{RawFileName}</WixLibrarySearchPaths>
    </PropertyGroup>

    <ResolveWixReferences
        WixReferences="@(WixLibrary)"
        SearchPaths="$(WixLibrarySearchPaths)"
        SearchFilenameExtensions=".wixlib">
      <Output TaskParameter="ResolvedWixReferences" ItemName="_ResolvedWixLibraryPaths" />
      <Output TaskParameter="UnresolvedWixReferences" ItemName="_UnresolvedWixLibraryPaths" />
    </ResolveWixReferences>
  </Target>

  <!--
    ================================================================================================
                                        ResolveWixExtensionReferences

    Resolves WiX extension references to full paths.

    By default the WixExtensionSearchPaths property is set to find extensions in the following order:

        (1) $(ReferencePaths) - the reference paths property.
        (2) The hintpath from the referenced item itself, indicated by {HintPathFromItem}.
        (3) Treat the reference's Include as if it were a real file name.

    [IN]
    @(WixExtension) - WixExtension item group

    [OUT]
    @(_ResolvedWixExtensionPaths) - Item group with full paths to extensions
    ================================================================================================
    -->
  <PropertyGroup>
    <ResolveWixExtensionReferencesDependsOn></ResolveWixExtensionReferencesDependsOn>
  </PropertyGroup>
  <Target
    Name="ResolveWixExtensionReferences"
    DependsOnTargets="$(ResolveWixExtensionReferencesDependsOn)"
    Condition=" '@(WixExtension)' != ''">

    <PropertyGroup>
      <WixExtensionSearchPaths Condition=" '$(WixExtensionSearchPaths)' == '' ">$(ReferencePaths);{HintPathFromItem};{RawFileName}</WixExtensionSearchPaths>
    </PropertyGroup>

    <ResolveWixReferences
      WixReferences="@(WixExtension)"
      SearchPaths="$(WixExtensionSearchPaths)"
      SearchFilenameExtensions=".wixext.dll">
      <Output TaskParameter="ResolvedWixReferences" ItemName="_ResolvedWixExtensionPaths" />
      <Output TaskParameter="UnresolvedWixReferences" ItemName="_UnresolvedWixExtensionPaths" />
    </ResolveWixReferences>
  </Target>

  <!--
    ***********************************************************************************************
    ***********************************************************************************************
                                                                PrepareResources Section
    ***********************************************************************************************
    ***********************************************************************************************
    -->

  <!--
    ================================================================================================
                                        AssignTargetPaths - OVERRIDE Target

    Determines the final list of culture groups to build based on either the Cultures property or
    those specified in .wxl files.

      Culture groups specified in the Cultures property must be specified as a semi-colon
      delimited  list of groups, with comma-delimited cultures within a group.
      For example:
        <Cultures>en-US,en;en-GB,en</Cultures>
      This will build 2 targets, outputing to en-US and en-GB sub-folders.  Light will first look
      for strings in the first culture (en-US or en-GB) then the second (en).

      Cultures of .wxl files will be used when the Culture property is not set.  The culture of a
      .wxl file is determined by the Culture attribute in the WixLocalization element in the file

    Sets the OutputFolder metadata on each culture group.  In most cases this is the same as the
    first culture in the culture group.  When the Culture's property is unspecified and no .wxl
    files are provided this is the same as the output directory.  When the Culture's property
    specifies a single culture group and no .wxl files are provided this is the same as the output
    directory.

    Updates the TargetPath and TargetPdbPath properties to be used in subsequent targets.

    [IN]
    @(EmbeddedResource) - The list of wxl files to use for localization.
    $(Cultures) - The list of culture groups to build.

    [OUT]
    @(CultureGroup) - The list of culture group strings with OutputFolder metadata
    $(TargetPath) - Property list of target link output MSIs/MSMs
    $(TargetPdbPath) - Property list of target output pdbs
    ================================================================================================
    -->
  <Target
      Name="AssignTargetPaths"
      Condition=" '$(OutputType)' == 'Package' or '$(OutputType)' == 'PatchCreation' or '$(OutputType)' == 'Module' ">

    <WixAssignCulture Cultures="$(Cultures)" Files="@(EmbeddedResource)">
      <Output TaskParameter="CultureGroups" ItemName="CultureGroup" />
    </WixAssignCulture>

    <!-- Expand the culture groups then put them back into the appropriate property -->
    <ItemGroup>
      <_CulturedTargetPath Include="$(TargetDir)%(CultureGroup.OutputFolder)$(TargetFileName)" />
      <_CulturedTargetPdbPath Include="$(TargetPdbDir)%(CultureGroup.OutputFolder)$(TargetPdbFileName)" />
    </ItemGroup>

    <PropertyGroup>
      <TargetPath>@(_CulturedTargetPath)</TargetPath>
      <TargetPdbPath>@(_CulturedTargetPdbPath)</TargetPdbPath>

      <!-- Update bind tracking filename prefix so cultures appended to the filename will be separated by a "-" -->
      <BindTrackingFilePrefix>$(BindTrackingFilePrefix)-</BindTrackingFilePrefix>
    </PropertyGroup>
  </Target>

  <!--
    ================================================================================================
                                        CreateManifestResourceNames

    Converts the EmbeddedResource into _WixLocalizationFile to disable satellite assembly
    generation in common targets.
    ================================================================================================
    -->
  <Target
      Name="CreateManifestResourceNames"
      Condition=" '@(EmbeddedResource)' != '' ">

      <ItemGroup>
        <_WixLocalizationFile Include="@(EmbeddedResource)">
          <Type>wxl</Type>
        </_WixLocalizationFile>

        <EmbeddedResource Remove="@(EmbeddedResource)" />
      </ItemGroup>
  </Target>

  <!--
    ================================================================================================
                                        GetTargetPath - OVERRIDE DependsOn

    This stand-alone target returns the name of the build package (i.e. MSI, MSM) that would be
    produced if we built this project.
    ================================================================================================
    -->
  <PropertyGroup>
    <GetTargetPathDependsOn>$(GetTargetPathDependsOn);AssignTargetPaths</GetTargetPathDependsOn>
  </PropertyGroup>

  <!--
    ***********************************************************************************************
    ***********************************************************************************************
                                                                Compile Section
    ***********************************************************************************************
    ***********************************************************************************************
    -->

  <!--
    ================================================================================================
                                        CoreCompile

    ================================================================================================
    -->
  <PropertyGroup>
    <CompileDependsOn>
      $(CompileDependsOn);
      WindowsInstallerValidation
    </CompileDependsOn>
    <CoreCompileDependsOn>
      AssignTargetPaths;
      CreateManifestResourceNames;
      ReadPreviousBindInputsAndBuiltOutputs;
      _CreateProjectDefineConstants;
      $(CoreCompileDependsOn)
    </CoreCompileDependsOn>
  </PropertyGroup>
  <Target
      Name="CoreCompile"
      Inputs="$(MSBuildAllProjects);
      @(Compile);
      @(Content);
      @(_WixLocalizationFile);
      @(_WixReferencedProjectOutputs);
      @(_ResolvedWixLibraryPaths);
      @(_ResolvedWixExtensionPaths);
      @(_BindInputs)"
      Outputs="$(IntermediateOutputPath)$(BindTrackingFilePrefix)%(CultureGroup.OutputSuffix)$(BindTrackingFileExtension);@(_BindBuiltOutputs)"
      DependsOnTargets="$(CoreCompileDependsOn)"
      Condition=" '@(Compile)' != '' ">

    <PropertyGroup>
      <CabinetCachePath Condition=" '$(CabinetCachePath)'=='' and '$(ReuseCabinetCache)'=='true' ">$(IntermediateOutputPath)cabcache\</CabinetCachePath>
      <_WixBuildCabinetCachePath Condition=" '$(CabinetCachePath)'!='' ">$([MSBuild]::NormalizeDirectory($(CabinetCachePath), %(CultureGroup.OutputFolder)))</_WixBuildCabinetCachePath>
    </PropertyGroup>

    <Warning Text="@(UnsupportedWixExtension->'%(Identity)') does not have support for WiX Toolset v$(WixToolsetVersion)."
        Condition=" '@(UnsupportedWixExtension)' != '' "/>

    <WixBuild
        SourceFiles="@(Compile)"
        LibraryFiles="@(_ResolvedWixLibraryPaths)"
        LocalizationFiles="@(_WixLocalizationFile)"

        Cultures="%(CultureGroup.Identity)"

        Extensions="@(_ResolvedWixExtensionPaths)"

        IntermediateDirectory="$(IntermediateOutputPath)%(CultureGroup.OutputFolder)"

        OutputFile="$(IntermediateOutputPath)%(CultureGroup.OutputFolder)$(TargetFileName)"
        OutputType="$(OutputType)"
        PdbFile="$(IntermediateOutputPath)%(CultureGroup.OutputFolder)$(TargetPdbFileName)"
        PdbType="$(DebugType)"

        AdditionalOptions="$(CompilerAdditionalOptions) $(LinkerAdditionalOptions)"
        DefineConstants="$(DefineConstants);$(SolutionDefineConstants);$(ProjectDefineConstants);$(ProjectReferenceDefineConstants)"
        IncludeSearchPaths="$(IncludeSearchPaths)"
        InstallerPlatform="$(InstallerPlatform)"
        NoLogo="true"
        Pedantic="$(Pedantic)"

        BindPaths="@(BindPath)"
        BindVariables="@(BindVariable)"
        BindFiles="$(BindFiles)"
        BindTrackingFile="$(IntermediateOutputPath)$(BindTrackingFilePrefix)%(CultureGroup.OutputSuffix)$(BindTrackingFileExtension)"

        CabinetCachePath="$(_WixBuildCabinetCachePath)"
        CabinetCreationThreadCount="$(CabinetCreationThreadCount)"
        DefaultCompressionLevel="$(DefaultCompressionLevel)"

        SuppressAllWarnings="$(SuppressAllWarnings)"
        SuppressSpecificWarnings="$(SuppressSpecificWarnings)"
        TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
        TreatSpecificWarningsAsErrors="$(TreatSpecificWarningsAsErrors)"
        VerboseOutput="$(VerboseOutput)"

        ToolExe="$(WixToolExe)"
        ToolPath="$(WixToolDir)"
        YieldDuringToolExecution="true">
        <Output TaskParameter="ExitCode" PropertyName="_WixBuildExitCode" />
      </WixBuild>

    <ItemGroup>
      <_WixBuildOutputFile Include="$(IntermediateOutputPath)%(CultureGroup.OutputFolder)$(TargetFileName)" />
    </ItemGroup>
  </Target>

  <Target
      Name="WindowsInstallerValidation"
      DependsOnTargets="CoreCompile"
      Condition=" '$(_WixBuildExitCode)' != '' and '$(SuppressValidation)' != 'true' and ('$(OutputType)' == 'Package' or '$(OutputType)' == 'Module') ">
      <WindowsInstallerValidation
          DatabaseFile="$(IntermediateOutputPath)%(CultureGroup.OutputFolder)$(TargetFileName)"
          WixpdbFile="$(IntermediateOutputPath)%(CultureGroup.OutputFolder)$(TargetPdbFileName)"
          IntermediateDirectory="$(IntermediateOutputPath)%(CultureGroup.OutputFolder)"
          Ices="$(Ices)"
          SuppressIces="$(SuppressIces)"
          CubeFiles="$(AdditionalCub)"

          AdditionalOptions="$(ValidationAdditionalOptions)"

          NoLogo="true"
          SuppressAllWarnings="$(SuppressAllWarnings)"
          SuppressSpecificWarnings="$(SuppressSpecificWarnings)"
          TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
          TreatSpecificWarningsAsErrors="$(TreatSpecificWarningsAsErrors)"
          VerboseOutput="$(VerboseOutput)"
          YieldDuringToolExecution="true" />
  </Target>

  <!--
    ================================================================================================
                                        _CreateProjectDefineConstants

    Adds properties as define constants passed into the compiler.
    ================================================================================================
    -->
  <PropertyGroup>
    <_CreateProjectDefineConstantsDependsOn></_CreateProjectDefineConstantsDependsOn>
  </PropertyGroup>
  <Target
      Name="_CreateProjectDefineConstants"
      DependsOnTargets="$(_CreateProjectDefineConstantsDependsOn)">

    <PropertyGroup>
      <ProjectDefineConstants>
        Configuration=$(ConfigurationName);
        OutDir=$(OutDir);
        InstallerPlatform=$(InstallerPlatform);
        Platform=$(PlatformName);
        ProjectDir=$(ProjectDir);
        ProjectExt=$(ProjectExt);
        ProjectFileName=$(ProjectFileName);
        ProjectName=$(ProjectName);
        ProjectPath=$(ProjectPath);
        TargetDir=$(TargetDir);
        TargetExt=$(TargetExt);
        TargetFileName=$(TargetFileName);
        TargetName=$(TargetName);
        TargetPath=$(TargetPath);
      </ProjectDefineConstants>
    </PropertyGroup>

    <PropertyGroup>
      <SolutionDefineConstants Condition=" '$(DevEnvDir)'!='*Undefined*' ">$(SolutionDefineConstants);DevEnvDir=$(DevEnvDir)</SolutionDefineConstants>
      <SolutionDefineConstants Condition=" '$(SolutionDir)'!='*Undefined*' ">$(SolutionDefineConstants);SolutionDir=$(SolutionDir)</SolutionDefineConstants>
      <SolutionDefineConstants Condition=" '$(SolutionExt)'!='*Undefined*' ">$(SolutionDefineConstants);SolutionExt=$(SolutionExt)</SolutionDefineConstants>
      <SolutionDefineConstants Condition=" '$(SolutionFileName)'!='*Undefined*' ">$(SolutionDefineConstants);SolutionFileName=$(SolutionFileName)</SolutionDefineConstants>
      <SolutionDefineConstants Condition=" '$(SolutionName)'!='*Undefined*' ">$(SolutionDefineConstants);SolutionName=$(SolutionName)</SolutionDefineConstants>
      <SolutionDefineConstants Condition=" '$(SolutionPath)'!='*Undefined*' ">$(SolutionDefineConstants);SolutionPath=$(SolutionPath)</SolutionDefineConstants>
    </PropertyGroup>
  </Target>

  <!--
    ================================================================================================
                                        ReadPreviousBindInputsAndBuiltOutputs

    Reads a previous build's Bind contents and built outputs file into @(_BindInputs) and
    @(_BindBuiltOutputs) respectively.

    Note: Only the *built* outputs are used because using files copied to output folder
          can cause perpetual incremental build.

          Imagine the case where you have: Msi.wixproj -> Lib.wixproj -> Exe.csproj. The
          Exe.csproj cannot be both an input to Lib.wixproj and an output of Msi.wixproj
          (as an uncompressed file) because the Lib.wixproj will always newer than the
          Exe.csproj.

    [IN]

    [OUT]
    @(_BindInputs) - the content files required to bind (i.e. the Binary/@SourceFile and File/@Source files).
    @(_BindBuiltOutputs) - the previously built .msi, .msm, .pcp, .exe .wixpdb, .cabs, etc.
                           Does not include content copied to output folder.
    ================================================================================================
    -->
  <Target
    Name="ReadPreviousBindInputsAndBuiltOutputs">

    <ReadTracking File="$(IntermediateOutputPath)$(BindTrackingFilePrefix)%(CultureGroup.OutputSuffix)$(BindTrackingFileExtension)">
      <Output TaskParameter="Inputs" ItemName="_BindInputs" />
      <Output TaskParameter="BuiltOutputs" ItemName="_BindBuiltOutputs" />
    </ReadTracking>
  </Target>

  <!--
    ================================================================================================
                                        UpdateFileWritesWithBindInformation

    Reads the bind outputs file(s) output generated during WixBuild to correctly set the @(FileWrites)
    item. Most targets have it easy because they can do a static mapping from inputs to the outputs.
    However, the WixBuild target outputs are determined after a rather complex calculation we call
    linking and binding!

    This is an "after target" of CoreCompile to ensure it always runs, even if compiler was up to date. It
    reads the outputs file generated during the CoreCompile target.

    [IN]
    Path to bind outputs file(s).

    [OUT]
    @(FileWrites) updated with outputs from bind.
    ================================================================================================
    -->
  <Target
      Name="UpdateFileWritesWithBindInformation"
      AfterTargets="CoreCompile">

    <ReadTracking File="$(IntermediateOutputPath)$(BindTrackingFilePrefix)%(CultureGroup.OutputSuffix)$(BindTrackingFileExtension)">
      <Output TaskParameter="Outputs" ItemName="FileWrites" />
    </ReadTracking>

    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)$(BindTrackingFilePrefix)%(CultureGroup.OutputSuffix)$(BindTrackingFileExtension)" Condition=" Exists('$(IntermediateOutputPath)$(BindTrackingFilePrefix)%(CultureGroup.OutputSuffix)$(BindTrackingFileExtension)') " />
    </ItemGroup>
  </Target>

  <!--
    ***********************************************************************************************
    ***********************************************************************************************
                                                                AllProjectOutputGroups Section
    ***********************************************************************************************
    ***********************************************************************************************
    -->

  <!--
    ================================================================================================
                                        AllProjectOutputGroups - OVERRIDE Target

    The targets below drive output groups, which provide generic information about a
    project's inputs (e.g., content files, compilation sources, etc.) and built outputs
    (e.g., built EXE/MSI, wixpdb, content files, etc.)

    Each target may produce two kinds of items:  outputs and dependencies.  Outputs are
    items from the current project; dependencies are items that are brought into the
    current project as a result of referencing other projects or components.

    For both outputs and dependencies, the Include attribute
    specifies the location of the output/dependency; it must be a full path.  Any number
    of additional attributes may be placed on an output/dependency item.
    ================================================================================================
    -->
  <Target
      Name="AllProjectOutputGroups"
      DependsOnTargets="
        BuiltProjectOutputGroup;
        DebugSymbolsProjectOutputGroup;
        SourceFilesProjectOutputGroup;
        ContentFilesProjectOutputGroup" />

  <!--
    This is the key output for the BuiltProjectOutputGroup and is meant to be read directly from the IDE.
    Reading an item is faster than invoking a target.
    -->
  <ItemGroup>
    <BuiltProjectOutputGroupKeyOutput Include="$(TargetPath)">
      <IsKeyOutput>true</IsKeyOutput>
      <FinalOutputPath>$(TargetPath)</FinalOutputPath>
      <TargetPath>$(TargetFileName)</TargetPath>
    </BuiltProjectOutputGroupKeyOutput>
  </ItemGroup>

  <!--
    ================================================================================================
                                        BuiltProjectOutputGroup - OVERRIDE Target
    ================================================================================================
    -->
  <PropertyGroup>
    <BuiltProjectOutputGroupDependsOn>PrepareForBuild;AssignTargetPaths</BuiltProjectOutputGroupDependsOn>
  </PropertyGroup>
  <Target
    Name="BuiltProjectOutputGroup"
    Outputs="@(BuiltProjectOutputGroupOutput)"
    DependsOnTargets="$(BuiltProjectOutputGroupDependsOn)">

    <!-- Don't add BuiltProjectOutputGroupKeyOutput - to avoid duplicates, we only want to get the updated list of TargetPaths from the TargetPath property below -->

    <!-- Try to read the outputs from the bind tracking text file since that's the output list straight from compiler. -->
    <ReadTracking File="$(IntermediateOutputPath)$(BindTrackingFilePrefix)%(CultureGroup.OutputSuffix)$(BindTrackingFileExtension)">
      <Output TaskParameter="Outputs" ItemName="_BuiltProjectOutputGroupOutputIntermediate" />
    </ReadTracking>

    <!-- If we didn't get anything from the bind outputs text file, default to the target path. -->
    <ItemGroup Condition=" '@(_BuiltProjectOutputGroupOutputIntermediate)'=='' ">
      <_BuiltProjectOutputGroupOutputIntermediate Include="$(TargetPath)" />
    </ItemGroup>

    <!-- Convert intermediate items into final items; this way we can get the full path for each item -->
    <ItemGroup>
      <BuiltProjectOutputGroupOutput Include="@(_BuiltProjectOutputGroupOutputIntermediate->'%(FullPath)')">
        <!-- For compatibility with 2.0 -->
        <OriginalItemSpec Condition="'%(_BuiltProjectOutputGroupOutputIntermediate.OriginalItemSpec)' == ''">%(_BuiltProjectOutputGroupOutputIntermediate.FullPath)</OriginalItemSpec>
      </BuiltProjectOutputGroupOutput>
    </ItemGroup>
  </Target>

  <!--
    ================================================================================================
                                        DebugSymbolsProjectOutputGroup - OVERRIDE Target

    Populates the Debug Symbols project output group.
    ================================================================================================
    -->
  <PropertyGroup>
    <DebugSymbolsProjectOutputGroupDependsOn>AssignTargetPaths</DebugSymbolsProjectOutputGroupDependsOn>
  </PropertyGroup>
  <Target
    Name="DebugSymbolsProjectOutputGroup"
    Outputs="@(DebugSymbolsProjectOutputGroupOutput)"
    DependsOnTargets="$(DebugSymbolsProjectOutputGroupDependsOn)">

    <!-- Include build output pdb(s).  Different than predefined itemgroup since AssignTargetPaths target may change -->
    <ItemGroup>
      <DebugSymbolsProjectOutputGroupOutput Include="$(TargetPdbPath)" Condition=" '$(DebugType)' != 'none' "/>
    </ItemGroup>
  </Target>

  <!--
    ***********************************************************************************************
    ***********************************************************************************************
                                                                PrepareForRun Section
    ***********************************************************************************************
    ***********************************************************************************************
    -->

  <!--
    ================================================================================================
                                        CopyFilesToOutputDirectory - OVERRIDE Target

    Copy all build outputs, satellites and other necessary files to the final directory.
    ================================================================================================
    -->
  <Target
      Name="CopyFilesToOutputDirectory">

    <PropertyGroup>
      <!-- By default we're using hard links to copy to the output directory, disabling this could slow the build significantly -->
      <CreateHardLinksForCopyFilesToOutputDirectoryIfPossible Condition=" '$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)' == '' ">true</CreateHardLinksForCopyFilesToOutputDirectoryIfPossible>
      <CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible Condition="'$(BuildingInsideVisualStudio)' == 'true' or '$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)' == ''">false</CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible>
      <ErrorIfLinkFailsForCopyFilesToOutputDirectory Condition="'$(BuildingInsideVisualStudio)' == 'true' or '$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)' == ''">false</ErrorIfLinkFailsForCopyFilesToOutputDirectory>
    </PropertyGroup>

    <PropertyGroup>
      <CopyBuildOutputToOutputDirectory Condition="'$(CopyBuildOutputToOutputDirectory)'==''">true</CopyBuildOutputToOutputDirectory>
      <CopyOutputSymbolsToOutputDirectory Condition="'$(CopyOutputSymbolsToOutputDirectory)'==''">true</CopyOutputSymbolsToOutputDirectory>
      <FullIntermediateOutputPath>$([MSBuild]::NormalizeDirectory($(IntermediateOutputPath)))</FullIntermediateOutputPath>
    </PropertyGroup>

    <!-- Add the target output to the list to be copied. -->
    <ItemGroup>
      <_FullPathToCopy Include="$(IntermediateOutputPath)%(CultureGroup.OutputFolder)$(TargetFileName)" />
    </ItemGroup>

    <!-- Add the bound content output files to the list to be copied. -->
    <ReadTracking File="$(IntermediateOutputPath)$(BindTrackingFilePrefix)%(CultureGroup.OutputSuffix)$(BindTrackingFileExtension)">
      <Output TaskParameter="BuiltContentOutputs" ItemName="_FullPathToCopy" />
      <Output TaskParameter="CopiedOutputs" ItemName="_FullPathToCopy" />
    </ReadTracking>

    <ItemGroup>
      <_RelativePath Include="$([MSBuild]::MakeRelative(&quot;$(FullIntermediateOutputPath)&quot;, &quot;%(_FullPathToCopy.FullPath)&quot;))" />
    </ItemGroup>

    <Copy
        SourceFiles="@(_RelativePath->'$(IntermediateOutputPath)%(Identity)')"
        DestinationFiles="@(_RelativePath->'$(OutDir)%(Identity)')"
        SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
        OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
        Retries="$(CopyRetryCount)"
        RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
        UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
        UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
        ErrorIfLinkFails="$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)"
        Condition="'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">

      <Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>

    <Message Importance="High" Text="$(MSBuildProjectName) -&gt; $(TargetPath)" Condition="'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)'!='true'" />

    <!-- Copy the debug information file (.wixpdb), if any -->
    <Copy
        SourceFiles="$(IntermediateOutputPath)%(CultureGroup.OutputFolder)$(TargetPdbFileName)"
        DestinationFiles="$(TargetPdbDir)%(CultureGroup.OutputFolder)$(TargetPdbFileName)"
        SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
        OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
        Retries="$(CopyRetryCount)"
        RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
        UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
        Condition="'$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true' and '$(CopyOutputSymbolsToOutputDirectory)'=='true'">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>
  </Target>

  <Import Project="WixToolset.Signing.targets" Condition=" '$(WixSigningTargetsImported)' != 'true' " />

  <!-- Extension point: Define CustomAfterWixTargets to a .targets file that you want to include after this file. -->
  <Import Project="$(CustomAfterWixTargets)" Condition=" '$(CustomAfterWixTargets)' != '' and Exists('$(CustomAfterWixTargets)')" />

  <PropertyGroup>
    <DefaultItemExcludes Condition=" '$(BaseOutputPath)' != '' ">$(DefaultItemExcludes);$(BaseOutputPath)**</DefaultItemExcludes>
    <DefaultItemExcludes Condition=" '$(BaseIntermediateOutputPath)' != '' ">$(DefaultItemExcludes);$(BaseIntermediateOutputPath)**</DefaultItemExcludes>
    <DefaultExcludesInProjectFolder>$(DefaultItemExcludesInProjectFolder);**/.*/**</DefaultExcludesInProjectFolder>
  </PropertyGroup>

  <ImportGroup>
    <Import Project="$(MSBuildUserExtensionsPath)\WixToolset\$(WixToolsetMajorMinorVersion)\Imports\WixToolset.targets\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfterWixToolsetTargets)' != 'false' and Exists('$(MSBuildUserExtensionsPath)\WixToolset\$(WixToolsetMajorMinorVersion)\Imports\WixToolset.targets\ImportAfter')" />
    <Import Project="$(MSBuildExtensionsPath)\WixToolset\$(WixToolsetMajorMinorVersion)\Imports\WixToolset.targets\ImportAfter\*" Condition="'$(ImportByWildcardAfterWixToolsetTargets)' != 'false' and Exists('$(MSBuildExtensionsPath)\WixToolset\$(WixToolsetMajorMinorVersion)\Imports\WixToolset.targets\ImportAfter')" />
  </ImportGroup>
</Project>
